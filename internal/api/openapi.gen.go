// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// User defines model for User.
type User struct {
	Email     string `json:"email"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	UserId    string `json:"user_id"`
}

// UserCreate Data transfer object for creating a new User.
type UserCreate struct {
	Email     string `json:"email"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

// BadRequest defines model for BadRequest.
type BadRequest struct {
	Errors *[]struct {
		Message string `json:"message"`
	} `json:"errors,omitempty"`
	Message string `json:"message"`
}

// Conflict defines model for Conflict.
type Conflict struct {
	Message string `json:"message"`
}

// InternalServerErrror defines model for InternalServerErrror.
type InternalServerErrror struct {
	Message string `json:"message"`
}

// GetUserParams defines parameters for GetUser.
type GetUserParams struct {
	UserId string `form:"user_id" json:"user_id"`
}

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = UserCreate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get user
	// (GET /user)
	GetUser(c *gin.Context, params GetUserParams)
	// Create user
	// (POST /user)
	CreateUser(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserParams

	// ------------- Required query parameter "user_id" -------------

	if paramValue := c.Query("user_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument user_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c, params)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUser(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/user", wrapper.GetUser)
	router.POST(options.BaseURL+"/user", wrapper.CreateUser)
}

type BadRequestJSONResponse struct {
	Errors *[]struct {
		Message string `json:"message"`
	} `json:"errors,omitempty"`
	Message string `json:"message"`
}

type ConflictJSONResponse struct {
	Message string `json:"message"`
}

type InternalServerErrrorJSONResponse struct {
	Message string `json:"message"`
}

type GetUserRequestObject struct {
	Params GetUserParams
}

type GetUserResponseObject interface {
	VisitGetUserResponse(w http.ResponseWriter) error
}

type GetUser200JSONResponse User

func (response GetUser200JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUser400JSONResponse struct {
	Errors *[]struct {
		Message string `json:"message"`
	} `json:"errors,omitempty"`
	Message string `json:"message"`
}

func (response GetUser400JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetUser404JSONResponse struct {
	Message string `json:"message"`
}

func (response GetUser404JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUser201JSONResponse User

func (response CreateUser201JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser400JSONResponse struct{ BadRequestJSONResponse }

func (response CreateUser400JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser409JSONResponse struct{ ConflictJSONResponse }

func (response CreateUser409JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser500JSONResponse struct {
	InternalServerErrrorJSONResponse
}

func (response CreateUser500JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get user
	// (GET /user)
	GetUser(ctx context.Context, request GetUserRequestObject) (GetUserResponseObject, error)
	// Create user
	// (POST /user)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetUser operation middleware
func (sh *strictHandler) GetUser(ctx *gin.Context, params GetUserParams) {
	var request GetUserRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUser(ctx, request.(GetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUserResponseObject); ok {
		if err := validResponse.VisitGetUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(ctx *gin.Context) {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx, request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		if err := validResponse.VisitCreateUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xWTY8bNw/+K4Te9zhru617qG/dJC32UhTZ9hQsAu6IYyudkbQk5fVgMf+9kGb8hXW+",
	"0LQNetMHSel5xIfUk6lDF4Mnr2JWT4ZJYvBCZXKN9jU9JBLNszp4JV+GGGPralQX/PydBJ/XpN5Qh3kU",
	"OURidWMQYg5cRk6pk+cGHYngmvJQ+0hmZUTZ+bUZhsowPSTHZM3qzcHwrtobhvt3VKsZDgvIjH2ef4Gg",
	"2dKS1OxiBmpW5rcNgRBviaEOqbXgg0LyllgUvQXdEPBIGNhEoAGc32LrLEjvFXczyCHq1pFXkE2J0QXr",
	"mv7Mt8TiHnCNzs8ynBfBN62r/8o7/G2M7G99pOSeIGdVS0p2TwRCPWGAR6ebgrdOzIUJRSUIzUSChMQ1",
	"zeA1SWi3NJrunZ9zc+OV2GN7W17mFed8+xp5mjKHfB1SvjJZQA/J0y5SnZmqg7cuO4BuUCEybcnnDafQ",
	"cOigSW3j2tb59Wm6ZKJiYC1rTmTkO08kxXGDsAPX5DiRWJyozAqckYMC+3chviDeDl17gYrKNI5F33rs",
	"6OJ2ix/aTUL81tmPc3wMc3biMUI1XfFSTciQXjChlkucP8hLVARl9NIQw+gDTWCos0NmGMHTI+QYM1P9",
	"E7R8KvT3AK7M7qpx1rZ0ZTVcOd+EfMg9Ct2WZ/6lHDs+9FBydG9zTs2rHWbtwmPgPyRinc9Up212/vHX",
	"m5/KGXA7Gr2kxvmStKYy25xcJcZitpgtMuAQyWN0ZmW+K0uViaibQuI8TSm3piLSTHCR6I01K/Mzablp",
	"dmDsSCk3kTdPhnaxDZbMSjlRxmBW5iER96YyI7MnyXEkdLQ+iv7Z04j2BWITuDPDXXXeCr9dLD6rpvyf",
	"qTEr87/5sb3OJ7XN9y/woWL6iAKS6ppEmtRWsG8vUxHZoACTJvZ01nbIHuonOL+vpwUG3Afbl4K5/Ews",
	"/9l+vlws4Bot7D85hZvl19Y7lotl6apNSN6OZTt1HXI/qgTSKBPFdRZISX4xd0NlYpALwhor4qStKW2u",
	"g+2/aHpPZXc4x501ODwT1jf/urDGUn8QTjYpbYDsqV4unXyAMj/5KxeXHz7ucvjUDZX5/lPOuPjTOU+I",
	"kfj35US2ndaeToulmOFu+DMAAP//WO0LlwsMAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
